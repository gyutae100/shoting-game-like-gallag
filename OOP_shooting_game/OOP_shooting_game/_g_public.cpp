

//------------------------------------------------------------------------------
//	모든 소스 파일에서 접근 가능
//------------------------------------------------------------------------------
#include "stdafx.h"
#pragma once

#include "_g_public.h"


//------------------------------------------------------------------------------
//	신 매니저
//------------------------------------------------------------------------------
CSceneManager g_scean_manager;


//------------------------------------------------------------------------------
//	전역 링크드 리스트
//	
//	:모든 오브젝트 요소 관리
//------------------------------------------------------------------------------
CList<CObject*> g_list_object;

CList<int> g_test;


//------------------------------------------------------------------------------
//	파일 외부 전역 이터레이터 저장 배열
//------------------------------------------------------------------------------
CList<CObject*>::iterator* g_buf_iter[SIZE_PLAY_SCREEN::PLAY_SCREEN_HEIGHT][SIZE_PLAY_SCREEN::PLAY_SCREEN_WIDTH];


//------------------------------------------------------------------------------
//	파일 외부 전역 출력 버퍼
//	
//	:더블 버퍼링 방식
//	:초기화 '\0'
//------------------------------------------------------------------------------
char g_buffer[SIZE_PLAY_SCREEN::PLAY_SCREEN_HEIGHT][SIZE_PLAY_SCREEN::PLAY_SCREEN_WIDTH] = { '\0', };


//------------------------------------------------------------------------------
//	플레이어 메시지 저장
//	
//	:키 커멘드 저장
//	:사이즈 
//------------------------------------------------------------------------------
CList <play_info_msg> g_player_msg[2];


//------------------------------------------------------------------------------
//	현재 이터레이터
//------------------------------------------------------------------------------
CList<CObject*>::iterator current_iter;



//------------------------------------------------------------------------------
//	현재 Scean 넘버 
//------------------------------------------------------------------------------
static int CURRENT_SCEAN_NUMBER = 0;



//------------------------------------------------------------------------------
//	버퍼 출력
//------------------------------------------------------------------------------
void Bf_Out()
{
	for (int y = 0; y < SIZE_PLAY_SCREEN::PLAY_SCREEN_HEIGHT; y++)
	{
		for (int x = 0; x < SIZE_PLAY_SCREEN::PLAY_SCREEN_WIDTH; x++)
		{
			char current_obj = g_buffer[y][x];
			char shape_out = '\0';
			if (current_obj == 'B')
				shape_out = '-';
			if (current_obj == 'E')
				shape_out = 'E';
			if (current_obj == 'P')
				shape_out = 'P';

			printf("%c", shape_out);
		}
		printf("\n");
	}
}


//------------------------------------------------------------------------------
//	키 처리 후 메시지 큐에 저장 
//	
//	:플레이어 수 만큼 처리
//------------------------------------------------------------------------------
void Cs_GetMsg()
{
	//현재는 2인용
	play_info_msg msg_player[2];
	msg_player[0].from = NUM_PLAYER::FIRST_PLAYER;

	msg_player[1].from = NUM_PLAYER::SECOND_PLAYER;

	//------------------------------------------------------------------------------
	//	플레이어 1용 키 처리 부분
	//
	//	:방향 4키, 스페이스로 구성
	//  :방향키는 이동, 스페이스는 불렛 생성
	//------------------------------------------------------------------------------


	//------------------------------------------------------------------------------
	//	플레이어 1 왼쪽 방향키 입력
	//------------------------------------------------------------------------------
	if (GetAsyncKeyState(VK_LEFT) & 0x8001)
	{
	
			msg_player[0].msg = COMMAND_PLAYER::KEY_LEFT;
			//메시지 큐에 저장
			g_player_msg[FIRST_PLAYER].push_back(msg_player[0]);
		

	}


	//------------------------------------------------------------------------------
	//	플레이어 1 오른쪽 방향키 입력
	//------------------------------------------------------------------------------
	if (GetAsyncKeyState(VK_RIGHT) & 0x8001)
	{



			msg_player[0].msg = COMMAND_PLAYER::KEY_RIGHT;
			//메시지 큐에 저장
			g_player_msg[FIRST_PLAYER].push_back(msg_player[0]);
		

	}


	//------------------------------------------------------------------------------
	//	플레이어 1 아래 방향키 입력
	//------------------------------------------------------------------------------
	if (GetAsyncKeyState(VK_DOWN) & 0x8001)
	{

	
			msg_player[0].msg = COMMAND_PLAYER::KEY_DOWN;
			//메시지 큐에 저장
			g_player_msg[FIRST_PLAYER].push_back(msg_player[0]);



	}


	//------------------------------------------------------------------------------
	//	플레이어 1 위쪽 방향키 입력
	//------------------------------------------------------------------------------
	if (GetAsyncKeyState(VK_UP) & 0x8001)
	{


			msg_player[0].msg = COMMAND_PLAYER::KEY_UP;
			//메시지 큐에 저장
			g_player_msg[FIRST_PLAYER].push_back(msg_player[0]);
		


	}


	//------------------------------------------------------------------------------
	//	플레이어 1 스페이스 입력
	//------------------------------------------------------------------------------
	if (GetAsyncKeyState(VK_SPACE) & 0x8001)
	{


			msg_player[0].msg = COMMAND_PLAYER::KEY_SPACE;
			//메시지 큐에 저장
			g_player_msg[FIRST_PLAYER].push_front(msg_player[0]);

		


	}


	//추후 플레이어 2용 도 추가


}


//------------------------------------------------------------------------------
//	버퍼에 해당 요소 저장
//
//	:현재 사용 안하는 중
//------------------------------------------------------------------------------
bool Bf_SpriteDraw(CObject* current_object)
{
	int now_x = 0;
	int now_y = 0;
	char now_shape = 0;

	//현재 해당 오브젝트 좌표 저장
	now_x = current_object->GetX();
	now_y = current_object->GetY();

	//현재 해당 오브젝트 모양 저장
	//총알인 경우
	if (current_object->GetType() == TYPE_OBJECT::C_BULLET)
	{
		now_shape = '-';
	}
	else if (current_object->GetType() == TYPE_OBJECT::C_PLAYER)
	{
		now_shape = 'P';
	}
	else if (current_object->GetType() == TYPE_OBJECT::C_PLAYER)
	{
		now_shape = 'E';
	}


	//버퍼에 기록
	g_buffer[now_y][now_x] = now_shape;

	return true;
}
