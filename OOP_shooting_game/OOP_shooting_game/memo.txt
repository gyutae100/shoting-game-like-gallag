
			//------------------------------------------------------------------------------
			//	:오브젝트가 화면을 벗어나는 경우 체크
			//------------------------------------------------------------------------------
			if (!CheckRangeX(now_x + inc_x) || !CheckRangeY(now_y + inc_y))
			{
				//안움직인 상태 저장
				_last_move_direction = MOVE_STOP;

				continue;
			}


			 //------------------------------------------------------------------------------
			 //	불렛 발사 여부 체크
			 //------------------------------------------------------------------------------
			if (true == shoot_flag)
			{
				//불렛 객체 생성
				CBullet * new_bullet = new CBullet(now_x, now_y, true, BULLET_TYPE::STRAIGHT, DIRECTION_MOVE::MOVE_LEFT);
				g_list_object.push_back(new_bullet);

				//현재 같은 좌표 이터레이터 가져옴
				//이터 버퍼에 표시
				CList<CObject*>::iterator *new_ptr_iter = new CList<CObject*>::iterator;
				*new_ptr_iter = g_list_object.GetLastIter();
				g_buf_iter[now_y][now_x] = new_ptr_iter;


				next_iter_flag = true;
			}


			//------------------------------------------------------------------------------
			//	충돌 조건이지만 이전 오브젝트가 패스한 경우 체크
			//------------------------------------------------------------------------------
			if (g_buffer[pre_y][pre_x] != '\0')
			{
				//기존 좌표 오브젝트 이터레이터 가져옴
				CList<CObject*>::iterator ptr_same_coordinate_iter = *(g_buf_iter[pre_y][pre_x]);

				//기존 오브젝트 반환
				CObject *obj_same_coordinate = *(ptr_same_coordinate_iter);

				//기존 오브젝트 타입 반환
				TYPE_OBJECT type_same_coordinate_obj = obj_same_coordinate->GetType();

				int obj_same_coordinate_pre_x = obj_same_coordinate->GetPreX();
				int obj_same_coordinate_pre_y = obj_same_coordinate->GetPreY();

				int obj_same_coordinate_now_x = obj_same_coordinate->GetX();
				int obj_same_coordinate_now_y = obj_same_coordinate->GetY();


				//------------------------------------------------------------------------------
				//	충돌 판정
				//
				//	:obj_same_coordinate_obj가 불렛 타입일 때만 해당
				//------------------------------------------------------------------------------
				if (now_x + inc_x == obj_same_coordinate_pre_x && now_y+inc_y == obj_same_coordinate_pre_y &&
					pre_x == obj_same_coordinate_now_x && pre_y == obj_same_coordinate_now_y
					&&
					type_same_coordinate_obj == TYPE_OBJECT::C_BULLET
					)
				{
					//------------------------------------------------------------------------------
					//	충돌 판정
					//------------------------------------------------------------------------------

					//기존 오브젝트 파괴
					obj_same_coordinate->Destroy();


					//현재 이터레이터를 지우고 다음 이터레이터를 가리키게 만듬
					current_iter = g_list_object.erase(current_iter);


					return true;
				}
			}


			//------------------------------------------------------------------------------
			//	오브젝트 간 충돌 여부 판단
			//
			//	:현재 오브젝트의 이동 후 좌표값으로 이동 가능 여부 체크 
			//------------------------------------------------------------------------------
			if (g_buffer[now_y + inc_y][now_x + inc_x] != '\0')
			{
				//같은 좌표 내 기존 오브젝트 이터레이터 가져옴
				CList<CObject*>::iterator ptr_same_coordinate_iter = *(g_buf_iter[now_y + inc_y][now_x + inc_x]);

				//기존 오브젝트 반환
				CObject *obj_same_coordinate = *(ptr_same_coordinate_iter);

				//기존 오브젝트 타입 반환
				TYPE_OBJECT type_same_coordinate_obj = obj_same_coordinate->GetType();



				//같은 좌표 내 기존 오브젝트 타입이 불렛인 경우
				//둘 다 파괴되어야 한다
				if (type_same_coordinate_obj == TYPE_OBJECT::C_BULLET)
				{
					//형변환
					CBullet *bullet_same_coordinate = (CBullet *)obj_same_coordinate;

					//기존 오브젝트 방향 저장
					DIRECTION_MOVE direction_same_coordinate_obj;
					direction_same_coordinate_obj = bullet_same_coordinate->GetDirectionMove();


					//기존 오브젝트 파괴
					obj_same_coordinate->Destroy();

					//현재 이터 지움
					current_iter = g_list_object.erase(current_iter);
					return true;


				}

				//------------------------------------------------------------------------------
				//	해당 오브젝트가 기존 물체와 좌표가 겹치는 경우
				//
				//	:이동 안함
				//------------------------------------------------------------------------------
				else
				{
					//------------------------------------------------------------------------------
					//	이동한 오브젝트 좌표 재설정
					//------------------------------------------------------------------------------
					SetX(now_x);
					SetY(now_y);
				}
			}//오브젝트 간 충돌 체크 끝


			 //------------------------------------------------------------------------------
			 //	 오브젝트가 겹쳐지지 않는 경우
			 //------------------------------------------------------------------------------
			else
			{
				//------------------------------------------------------------------------------
				//	이동한 오브젝트 좌표 재설정
				//------------------------------------------------------------------------------
				SetX(now_x + inc_x);
				SetY(now_y + inc_y);
			}

			//------------------------------------------------------------------------------
			//	로직 후 이동 좌표 재 저장
			//------------------------------------------------------------------------------
			now_x = GetX();
			now_y = GetY();

